<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on FuShaoLei Blog</title>
    <link>https://fushaolei.github.io/post/</link>
    <description>Recent content in Posts on FuShaoLei Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 02 Jul 2022 17:34:37 +0000</lastBuildDate><atom:link href="https://fushaolei.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>《图解Http》笔记</title>
      <link>https://fushaolei.github.io/post/diagram-http-note/</link>
      <pubDate>Sat, 02 Jul 2022 17:34:37 +0000</pubDate>
      
      <guid>https://fushaolei.github.io/post/diagram-http-note/</guid>
      <description>好久没写博客了，但是笔记是有常常写的，只是懒的把笔记放到博客上，因为我觉得，博客里一定要有内容，至少百分之八十的文章，要让人读了感觉有收获，我觉得这样个人博客才能够受欢迎，而自己平常做的笔记，比较随意，所以不太敢放上来，但是我觉得也不用那么刻意，毕竟看博客最多的可能是自己，现在也关闭了评论系统了，其实可以用gitalk，但是我觉得这个东西，比较粗糙，因为有时候换个url什么之类的，可能它又另启一个仓库，感觉比较傻瓜，当然，这只是过去我对它的认知，再加上评论的人不是很多，如果是交流学习的话，我感觉还是发邮件好一点，因为你会比较慎重。话不多说，下面是正文
第 1 章 了解web及网络基础 HTTP，全名Hypertext Transfer Protocol，超文本传输协议
互联网是再TCP/IP协议族的基础上运作起来的
TCP/IP协议族分为四层：
应用层：决定了向用户提供应用服务时的通信活动，如FTP，DNS，HTTP等 传输层：提供数据传输，如TCP，UDP 网络层：处理数据包？ 链路层：用来处理连接网路的硬件部分 与HTTP密切相关的几个协议：
IP协议：作用是保证数据包传送到指定目标 TCP协议：作用是可靠传输 DNS服务：负责解析域名成IP地址 URI和URL
URI是统一资源标识符，强调是唯一标识 URL是统一资源定位符，强调的是位置，在什么位置上 第 2 章 简单的HTTP协议 请求访问资源的一端为客户端，提供资源的一端为服务器端，始终都是由客户端来建立通信的
客户端请求报文：
// 方法 URI 版本协议GET /user/ HTTP/1.1// Request Headers Host: api.github.comContent-Type: text/plainContent-Length:21// Request Bodyname=fushaolei&amp;amp;age=21 服务端响应报文：
// 版本协议 状态码 状态信息HTTP/1.1 200 OK// Response Headers Content-Type: application/jsonContent-Length:21// Response Bodybodybodybodybodybodybodybodybodybodybodybodybodybodybodybodybodybodybodybodybody Http是不保存状态的协议
各种请求方法：
方法 说明 GET 请求资源，无Request Body，有Response Body POST 用于增加或修改资源，有Request Body，有Response Body PUT 同样用于增加或修改资源，但和POST不同的是，PUT是幂等的（调用一次与连续调用多次是等价的），有Response Body HEAD 获得报文首部，没有Response Body DELETE 删除文件 OPTIONS 询问支持方法 TRACE 追踪路径，可以查询发出去的请求是被怎样加工修改的 CONNECT 要求用隧道协议连接代理 使用Cookie进行状态管理，客户端保存好服务器端发送过来的Set-Cookie字段，在每次请求的时候带上Cookie，从而验证身份</description>
    </item>
    
    <item>
      <title>Linux笔记</title>
      <link>https://fushaolei.github.io/post/linux-note/</link>
      <pubDate>Sat, 10 Apr 2021 18:23:55 +0800</pubDate>
      
      <guid>https://fushaolei.github.io/post/linux-note/</guid>
      <description>第 1 讲 入门 Linux是一个开源的操作系统内核，以Linux作为内核的发行版有：Debian、Ubuntu、CentOS、OpenSUSE、Arch、Deepin、Mint等
Linux默认使用Ext4文件系统格式
Linux上，文件名称区分大小写，Windows上不区分
在Linux上，.开头的文件是隐藏文件
第 2 讲 目录结构和shell基础 Linux使用 / 表示根目录，而且所有的目录都至少包含两个子目录： . 和 ..
. 表示当前目录；.. 表示上一层目录。（/的..指向自己）
~表示用户主目录
开头带/的表示绝对路径，开头不带/的表示相对路径
目录说明 目录 说明 / 系统根目录 /usr 用户的程序，配置等信息 /home 默认创建用户会在此创建 /etc 存放系统配置文件 /bin /sbin /root /boot /lib /dev /media /proc /var /sys /lost+found /tmp /usr/bin /usr/sbin 终端和shell 终端是是计算机最外围设备。用于获取用户输入，并显示程序的输出结果。
shell是指运行命令的程序， Ubuntu 默认使用 bash 作为默认的 shell 。
命令的分类
内建命令：是shell本身的一部分 外部命令：独立的程序文件 一些具有辅助效果的命令
命令 说明 man man [命令]查看外部命令的帮助手册，man -k [字段]查看哪些文档里包含这个字段 help help [命令]或[命令] --help查看内建命令的帮助手册 type type [命令]查看命令是哪种类型的 whereis/which whereis/which [命令]查看命令是在那个目录 两个常用命令</description>
    </item>
    
    <item>
      <title>树莓派入门</title>
      <link>https://fushaolei.github.io/post/raspberry-pi-start/</link>
      <pubDate>Fri, 26 Mar 2021 23:58:55 +0800</pubDate>
      
      <guid>https://fushaolei.github.io/post/raspberry-pi-start/</guid>
      <description>树莓派入门❌ 树莓派吃灰✅
型号是1代B+型，买来时不太懂Linux方面的东西，所以安了个系统后就闲置吃灰了，直到今天，学习了一些Linux知识后又重新捣鼓了起来，这篇文章主要记录了我如何在没有屏幕的情况下安装系统以及通过putty连接到树莓派的。
一 烧录系统到sd卡 我使用的是官方提供的工具，简单又方便。指路：https://www.raspberrypi.org/software/
傻瓜式的操作了，就不多讲了
烧录之后，sd卡会变得奇奇怪怪的，当然也可把sd卡恢复成原来的样子，这里记录一下还原的的步骤
管理员方式启动cmd 输入 diskpart list disk select disk 1 #选择第一个磁盘 （这里我的sd卡是 disk 1） clean create partition primary active format fs=fat32 quick 二 将sd卡插入树莓派等待安装 安装过程中你可以看到黄灯在不规律的闪动，等到黄灯不闪了，只有红灯在亮的时候，八成是好了。
三 连接树莓派 首先先让树莓派连上网，这里我用的是网线的方式，然后用ssh连接树莓派，这里我使用的是putty
其中默认账号为pi，密码为raspberry
如果连接被拒绝，则可能是因为新版系统默认没有开SSH，可以将sd卡插到读卡器，手动用电脑，在根目录下创建一个名为ssh，无后缀的文件
登录成功之后
四 优化 改个密码
passwd 换源
树莓派 raspbian （各版本）换国内源
五 随便跑个程序看看 安个jdk8
sudo apt install openjdk-8-jdk 启动项目
java -jar demo.jar 运行成功 后续想用来练习练习linux相关的指令或者跑个博客（性能太差了，糟心@_@）什么的
学习网站 树莓派俱乐部 树莓派实验室 科技爱好者博客 参考 没有显示器情况下，安装和使用树莓派 树莓派（以及各种派）使用指南 sd卡烧录后恢复容量 </description>
    </item>
    
    <item>
      <title>Java关键字总结</title>
      <link>https://fushaolei.github.io/post/java-keyword/</link>
      <pubDate>Wed, 03 Mar 2021 13:34:37 +0000</pubDate>
      
      <guid>https://fushaolei.github.io/post/java-keyword/</guid>
      <description> 关键字 说明 class 定义一个类 enum 枚举类型 abstract 抽象类或方法 interface 接口 extends 定义一个类的父类，或者通配符的上界 implements 定义一个类实现的接口 new new操作符加上构造器，构造一个新的对象，返回值是一个对象的引用 this 一是指隐式参数的调用，二是指调用该类的其他构造器（而且只能放在第一行的位置） super 一是调用超类的方法，二是调用超类的构造器 import 导入一个包 package 包含类的一个包 public 访问修饰符，对外部完全可见 private 访问修饰符，仅对本类可见 protected 对本包及所有子类可见 </description>
    </item>
    
    <item>
      <title>《Java核心技术I》笔记</title>
      <link>https://fushaolei.github.io/post/core-java-1-note/</link>
      <pubDate>Fri, 15 Jan 2021 13:34:37 +0000</pubDate>
      
      <guid>https://fushaolei.github.io/post/core-java-1-note/</guid>
      <description>日期 说明 2021/01/31 读完了第一遍，边读边记，看的比较随意，除了第一第二章外，有些难的或者偏也都直接跳过了😜，看第二遍的时候再补回来吧 maybe。 概述 第 1 章 + 第 2 章 ： 这两章介绍了一些东西，比如Java的发展历史啊，Java的特性啊，以及Java的运行环境等等。特别要说的是，Java是一门面向对象程序设计语言，程序设计语言的成功取决于是否可以实现需要的功能，而不是语法的精巧性。以及JDK（Java Development Kit：Java开发工具包）与JRE（Java Runtime Environment：Java运行时环境） 第 3 章 Java的基本程序设计结构：这一章讲了Java的一些基础知识，比如注释啊，8 种基本类型啊（int,short,long,byte,double,float,boolean,char），变量（如何声明，初始化变量）与常量，运算符（其中还提到了短路的概念），介绍了字符串，输入输出等（这一节其实还讲了Math的一些静态方法，不过我觉得不是很重要，需要的时候可以查嘛，所以这里就不记录了） 第 4 章 对象与类：这一章介绍了面向对象思想，还有类与对象的关系，说了面向对象的一些特性，以及自定义类的一些内容，还有使用构造器时代码的执行顺序 第 3 章 Java的基本程序设计结构 1.第一个程序 public class Hello { public static void main(String[] args) { System.out.println(&amp;#34;Hello World&amp;#34;); } } 说明
public（访问修饰符） 用于控制对所修饰的类或对象或字段的访问级别 class表示这是一个类，Hello则是这个类的类名 main方法是所有程序的入口 大括号表示方法体的开始与结束 2.注释 //单行注释 /* 多行注释，（不能嵌套使用） */ /** * 文档注释 * 可用于自动的生成文档 */ 3.数据类型 基本类型 位数 字节 默认值 int 32 4 0 short 16 2 0 long 64 8 0L byte 8 1 0 char 16 2 &amp;lsquo;u0000&amp;rsquo; float 32 4 0f double 64 8 0d boolean 1 false 4.</description>
    </item>
    
    <item>
      <title>常用Git指令</title>
      <link>https://fushaolei.github.io/post/common-git/</link>
      <pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://fushaolei.github.io/post/common-git/</guid>
      <description> 指令 说明 git add . 将修改放入暂存区 git status 查看状态 git log 查看commit版本号 git reset --hard 版本号 版本回退，hard强制回退，soft的话会保留修改 git stash 将修改保存起来 git stash save &amp;quot;xxx&amp;quot; 将修改保存起来，并设置这个保存的标签 git stash apply stash@{x} 将修改移出来 git branch -vv 查看本地分支是否与远端分支建立了连接 git push origin &amp;lt;分支名&amp;gt;:&amp;lt;分支名&amp;gt; 仅仅将本地分支推送到远端分支， 注意:这个操作只是单纯的把本地的分支推送到远端,尚未建立连接 git push --set-upstream origin &amp;lt;分支名&amp;gt; 将本地分支推送到远端分支并建立连接 git checkout -b &amp;lt;分支名&amp;gt; origin/&amp;lt;分支名&amp;gt; 拉取远程分支到本地（本地与远程建立连接，前提是本地已经有其他分支了） </description>
    </item>
    
    <item>
      <title>常用软件及网址</title>
      <link>https://fushaolei.github.io/post/useful-software/</link>
      <pubDate>Sun, 10 Jan 2021 12:14:48 +0800</pubDate>
      
      <guid>https://fushaolei.github.io/post/useful-software/</guid>
      <description>常用软件 软件名 说明 火绒 用来杀毒的，虽然可能没什么毒 迅雷 有时在浏览器上下不动的东西在迅雷上会莫名的下的很快 JetBrains系列产品 开发利器 Android Studio 开发Android常用IDE Typora 用于书写markdown Git 版本控制工具 VScode 用于开发，几乎什么格式的都能打开，再加上各种各样的神奇插件，这个软件简直无敌 Sumatra PDF阅读器 一款小巧的pdf阅读器，缺点是颜值太低咯QAQ Free Download Manager 用于下载youtube上的视频 Charles 抓包常用工具 常用网址 网址 说明 亚马逊官网 用于购物，我通常在这买书 bilibili 视频网站 </description>
    </item>
    
    <item>
      <title>Hello Hugo</title>
      <link>https://fushaolei.github.io/post/hello-hugo/</link>
      <pubDate>Fri, 08 Jan 2021 12:54:02 +0800</pubDate>
      
      <guid>https://fushaolei.github.io/post/hello-hugo/</guid>
      <description>近来总是不满意自己的hexo主题，怎么改都觉得不满意，其实我这样已经违背了博客的初衷了，但没办法，明知背道而驰了我还是不想停下来，就这样。我不断的修改着自己的主题，然后还不断着物色主题商店的主题，没有一个令我满意的，就连自己做的那个，也是因为不满意而自暴自弃了。
遂转到hugo。
而且我还发现，hugo比hexo安装的时候快多了，hugo只需要下一个程序而已，而hexo需要安装什么nodejs环境啊之类的，比较麻烦。
所以，早知道一开始就选hugo啦！！！！
搭建教程参考这篇文章：使用Github(Action)+Hugo搭建自己的博客 </description>
    </item>
    
    <item>
      <title>在新浪实习是一种什么体验？</title>
      <link>https://fushaolei.github.io/post/work-in-sina/</link>
      <pubDate>Tue, 15 Dec 2020 15:07:39 +0000</pubDate>
      
      <guid>https://fushaolei.github.io/post/work-in-sina/</guid>
      <description>机缘 2020年的六月份开始，为应学校的要求，我开始找实习工作，前后历经三个月，个中各种心酸事暂且不提，终于在九月份的某一天，我收到了来自新浪的实习offer。凭着年轻的一股劲以及对大城市的向往，一个南方少年，在一个月黑风高的夜晚，只身乘坐火车来到了这个名为北京的城市，开始了将近三个月的实习生涯。
初见 报道的前一天，为了计划好第二天的路程，我进行了一次实地考察。新浪大厦位于海淀区西北旺东路10号院8号楼，旁边就是网易，百度，腾讯等大厂，刚来的时候看的这个场景还是蛮震撼的。
距离我租的宿舍大概三四公里这样，然后每天我都要骑那么二三十分钟的车才能到这里（就当作锻炼了）。不要问我为什么不坐公司的大巴@_@，那是真特么晕啊，第一次坐的时候差点在车上吐了。
办完入职手续后，组里的leader便来接我了，然后就是安环境(用于code review的环境)，然后熟悉熟悉代码什么的。中午的时候还是大佬们带我去吃的午饭，然后逛逛新浪大厦什么的，熟悉熟悉环境。
好家伙 果然是企业级开发，一上来就给我整傻了，光项目就有2.5G大，跑了差不多一个小时才好。然后项目里面一大堆分包，什么MVP模式啊，什么Kotlin啊，什么自定义的组件，给我看傻了
和大家相处一段时间后 ，感觉组里的人情味比较浓， 技术氛围也很浓， 甚至有时候会给我一种就是在学校里几个同学一起做项目的错觉，不过就是项目大了些，技术复杂了些而已，当然 这都是后话了
吃在新浪 在新浪，我这个日常实习生唯一的福利就是 早餐会减免六块钱了。
所以我早晨吃的特别饱，然后午餐就可以少吃一些，省些钱。（写到这里，眼前浮现的是以往大手大脚花钱的自己，泪，夺眶而出QAQ）
下面放两个我很喜欢的早餐搭配，就不配图了，
豆腐脑+吐司煎蛋+南瓜饼
还有，紫米粥+咸菜+肉包+凉糕（现在看起来好奇怪当时自己的口味😂）刚开始为了吃早餐我还起的挺早的，后面因为赖床，就没吃了，然后午餐晚餐一般一顿都要二十以上这样，最便宜的西红柿鸡蛋面都要14块钱，哎，穷学生伤不起啊。不过后面发现了麻辣烫可以便宜些，于是也有吃过一段时间的麻辣烫哈哈。后期，基本都是两个菜配一碗饭了，肉根本不敢点，一碗肉就将近二十了，简直可怕。想想在学校的食堂，吃一顿饭也就七块钱，来到这里钱包都被榨干了(╯‵□′)╯︵┻━┻
玩在新浪 新浪的第一层布置了娱乐区，有健身房，舞蹈房，动感单车，还有台球桌，桌上足球等娱乐项目，像我一般都是午饭和晚饭后去打打台球，一两个月下来，Android技术没有涨多少，台球技术倒是进步了很多哈哈哈哈
日常工作 我所实习的岗位是 新浪新闻客户端，那我日常实习就是大佬给我分配需求，然后我去做就可以了（通常大佬都会给一些比较容易的活。。），有那么大概一个流程，如下
确认需求（有时候还要找产品进行确认） 开发（其实大多时间都是在等编译。。） code review（这时候大佬会看我写的代码，然后指出哪里哪里不对什么的，修改后再此review，通过后才能进行下一步） 交给测试进行分支测试（有时候有些bug测试都测不出来。。） 有bug的话改bug，没有的话就测试会交给产品进行确认 产品确认完毕就可以合入主分支了，然后进行集成测试 这里要吐槽一下，那么大的公司居然不给实习生发个电脑。只能用着自己的那个垃圾电脑，每次build都要半个小时(╯‵□′)╯︵┻━┻ 每天都是在等待build中度过。。。难受的一批，这也是我离职的一部分原因，受不了了
工资 给的真的少，还特么扣税，我一个月的工资扣完税后只剩 2500 这样，这可是北京啊。反正我已经倒贴了好多，每个月光租房就花去了1700，剩下的没多少了。如果你也想来新浪实习的话，请慎重考虑！
实习体会与收获 第一次实习就到了这样蛮不错的公司，我感觉自己真是个幸运儿哈哈。然后组里的大佬也都蛮照顾我的，尤其带我的那个大佬说过一句让我印象深刻的话，他说 我们写的代码是写给人看的，确实，这个项目会不断的修修改改，当别人修改到你的代码的时候，不知道你在写什么，想要干什么，这样的话就得从头来过了，直接的增加了代码的维护成本。所以，工作中，我也严格要求自己，让自己的代码变得易读又简洁，就也是我每一次写代码的目标。通过这次实习，除了学会了基本的工作流程以外，在日常开发中也让我重新认识了一些概念，比如面向对象开发啊，如何体现到代码中去，比如Android的布局啊，怎么样效率才高啊，又比如listview的view复用机制，这些都是我以前从未去了解或者去接触 实践过的。同时，还让我意识到了自己的基础是多么的薄弱，还需加强。 总体来说，收获满满啊。因为要回学校考试，再加上我受不了我那个破电脑的编译速度以及一些其他原因，十二月份的某一天，我便从新浪离职了。经历了两个多月的历练，我完成了学生到打工人的身份上的转变，从此 我也是一名社畜啦~
走啦！有缘再见！愿各位都有个美好的前程！</description>
    </item>
    
    <item>
      <title>一日游</title>
      <link>https://fushaolei.github.io/post/life-travel-in-gugong/</link>
      <pubDate>Mon, 14 Dec 2020 16:53:37 +0000</pubDate>
      
      <guid>https://fushaolei.github.io/post/life-travel-in-gugong/</guid>
      <description>来北京实习也已经有两个多月了，但是因为这个学期选了三门课 要做网上的作业，然后又因为自己比较懒，再加上天气变冷了，虽然一直在北京，但从未出去玩过。眼看下个星期就要离职了，这时不出去玩更待何时？
于是，在十二月十二号的早晨十点，我便乘坐地铁，去往故宫。
然而，快到故宫的时候我才发现我没带身份证，还有学生证也没带，就很无语&amp;hellip;..不过最后还是硬着头皮进去了。
末了还去朋友宿舍撸了撸他的猫
晚上还一起吃了烤串，喝个啤酒什么的，好不快活！</description>
    </item>
    
    <item>
      <title>获取jetbrains license</title>
      <link>https://fushaolei.github.io/post/get-the-jetbrains-license/</link>
      <pubDate>Sat, 21 Nov 2020 22:41:39 +0000</pubDate>
      
      <guid>https://fushaolei.github.io/post/get-the-jetbrains-license/</guid>
      <description>楔子 对于大多数收费软件，例如ps，pr，idea等等之类的，我大多数是白嫖，需要授权码的话就去网上随便一搜，遍地都是，一个不行就换下一个，总之 总是能找到可以用的。诸如此类的事情，数不胜数。甚至老师当时教springboot的时候（要用IDEA），就直接提供破解方法给我们了。。原因呢，很简单，因为我们学生无力购买这花费高昂的软件，然后又想使用，所以不得不用盗版的了，这也是情有可原的，再一个是，白嫖是人类的天性（也不能说是全部），就算软件的价格在可以承担的范围内，仍会有人去用盗版的，为什么，因为有免费的谁会去花钱呐哈哈哈。当然。当时安装IDEA的时候我也用的盗版，软件到期时间直接他吗的干到2089年😂估计那个时候我已经驾鹤西去了。
然后不知道怎么，在网上了解到，可以通过学生的身份去申请使用权，可是我没有学生邮箱啊，学校没发。。然后又了解到可以用自己的开源项目去申请，刚好手中有一个hexo主题的项目，hexo-theme-white，这主题也注入了自己好多的心血，今年七月开的坑，虽然已经暂停维护一个月了，不过已有六十多颗star，有将近二十个fork，还收到了4，5个PR，还是蛮开心的，第一次维护项目，那感觉真是奇妙啊，每一次被star都是对我的肯定，然后我还建了个群（不过现在已经解散了，感觉没什么用），大家讨论来讨论去的，还是蛮开心的，因为感觉自己的东西被别人认可了，那感觉真不是一时的开心，而是持续的，有时候可用偷偷躲在被窝里笑的开心哈哈哈
初试 抱着试一试的心态，我打开了这个网址 https://www.jetbrains.com/zh-cn/community/opensource/ 点击申请后进入申请界面申请即可，注意开源项目必须是持续开发三个月的项目，当时我就用了我从六七月份开始开坑的hexo主题hexo-theme-white项目进行申请，虽然只是一个小小的html项目，但是里边也侵入了我很多的心血和时间，不过我感到蛮快乐的，因为自己的开源项目得到了许多人的肯定（截至目前有70多颗Star了），然后这中间也有建立过QQ群，然后也和我的“用户”交流什么的啊，同时也得到了一些PR，啊，这感觉真是奇妙啊
回应 然后，过了大概三四天吧，就有一个负责人联系我了：
哦，原来是叫我把授权码填入Github的简介中啊，然后再过了两天，审批就通过了！JetBrains会给你发一个授权的网址，然后进去后注册你的账号，然后授权就完成啦！进入你的账户的主页就可以看到：
左边可以看到我用来申请的项目，然后右边可以看到一个License For non-commercial open source，即用于非商业的开源，不以商业目的的开源，然后下边可以看到，你可以用的软件，下载软件后登录你的账号密码就可以使用了！
后记 顺便推荐JetBrains家好用的一些软件~，
DataGrip用于管理数据库的工具 Clion写C或C++的IDE IDEA功能强大的Java IDE 我暂时用到就那么多，一个好用的IDE会是程序员手中的利器，会让我在敲代码的时候幸福感满满啊</description>
    </item>
    
    <item>
      <title>Android MVP模式思想</title>
      <link>https://fushaolei.github.io/post/android-mvp/</link>
      <pubDate>Tue, 06 Oct 2020 13:34:37 +0000</pubDate>
      
      <guid>https://fushaolei.github.io/post/android-mvp/</guid>
      <description>前言 以前有学过，感觉理解不了，然后又用不到，然后就不了了之了 ，现在因为实习公司的项目有用到，如果不学的话感觉根本看不懂项目（其实学完之后还是看不懂😂），所以就重新学过，顺便记录一下
2021年1月13日补充 当初想的窄了，从细枝末节入手，缺乏一个全局的观念，现在想起来，其实下面所说的预备知识，其实是为优化MVP模式所服务的。
以及，mvp模式只是一个思想，并没有具体的，标准的编码规定
预备知识 面向接口的编程思想 向上转型的概念 解耦 面向接口编程 先复习一下接口的概念：
在Java程序设计语言中，接口不是类，而是对希望符合这个接口的类的一组需求（出自《Java核心卷一》p222页） 说白了，接口就是一组需求
而面向接口编程呢，就是在开始开发前，先定义好接口（可以理解为先列出一组需求），然后再进行开发
向上转型 即父类引用指向子类对象（即多态），看完下面的代码应该更好理解些
public interface IStudent { String getName(); } public class Student implements IStudent{//此时IStudent是父类，Student是子类 @Override public String getName() { return &amp;#34;任我行&amp;#34;; } } public class Test { public static void main(String[] args) { IStudent iStudent; iStudent=new Student();//父类引用指向子类的对象，这里做了向上转型 System.out.println(&amp;#34;学生的名字是：&amp;#34;+iStudent.getName());//打印结果：学生的名字是：任我行 } } 解耦 解耦即降低依赖性
MVP模式 Actually，我觉得MVP模式的灵魂就是presenter层同时持有view层和model层的引用（请联系上边的向上转型的概念）。
照此逻辑，我们简单实现一个常见的登录模块。根据面向接口编程，我们首先列出我们的接口（需求）：
/** * View层的需求 */ public interface IView { //1. 获取用户的输入信息 public User getViewUser(); //2.</description>
    </item>
    
    <item>
      <title>GitHub Action &#43; Hexo 实现在线写作</title>
      <link>https://fushaolei.github.io/post/github-action-hexo/</link>
      <pubDate>Mon, 21 Sep 2020 22:01:51 +0000</pubDate>
      
      <guid>https://fushaolei.github.io/post/github-action-hexo/</guid>
      <description>心血来潮，研究了一下午，当写完的时候，上网一查，才发现已经有好多人都写过类似的文章了，但我感觉不记录就好像吃了亏什么的，所以，写了一篇蛮常见的文章，以此慰己
零，前言 hexo 是一款快速、简洁且高效的静态博客框架，因为它的高可定制性，所以深受各个程序员的喜爱，我也曾一头扎进去研究过，先后开发了white和hiya主题，在使用过程中，也渐渐的发现了一些问题
情景一，当浏览自己某篇博客时发现了一些错误之后想要马上修改时，将要经历经历一下步骤
在本地的hexo博客文件夹中找到source/_post文件夹 找到那个md文件，打开 修改 然后还要经历hexo clean,hexo g，hexo d 情景二，当想要马上写一篇博客时，需要经历以下步骤
在博客根目录中hexo n &amp;quot;博客名&amp;quot; 点击进入source/_post文件夹中找到这个md文件并打开 写博客 然后还要经历hexo clean,hexo g，hexo d三连 以上过程想必使用过hexo博客的人都经历过吧？不知道你们什么感觉，反正这对于我这种急性子的人来说简直是忍不了(╯‵□′)╯︵┻━┻，而且每次写完博客啊，修改完博客啊之类的，还必须经历过hexo clean,hexo g，hexo d才可以将博客推送到网上去，这玩意我一开始还有耐心，现在就不行了(ノ｀Д)ノ，幸好后来发现了github action可以实现自动部署，再结合自己以往开发hexo主题的经验，做出来了可以在线新建博客或者修改博客的功能（具体可参观我的博客），效果如下：
新建文章
修改文章
就这样，利用github action交给github去做hexo clean,hexo g，hexo d三连，很方便的实现了新建文章和修改文章，即优雅，又方便，那么这又是如何做到的呢？下面我将分为两个部分来说明，第一部分是如何结合github action来实现自动部署，第二部分是如何点击某个按钮后进入新建文章页，和修改文章页。
一，使用github aciton实现自动部署 1.在github新建一个仓库，专门用来存放源文件，我的源文件如下，供各位参考
什么？你不会要先git clone到本地后，再将源文件复制粘贴到里面再上传吧？这也太low太笨拙了吧哈哈哈，咳咳，如果你不会将本地仓库关联到远程仓库的话，请按下边步骤进行
在hexo源文件夹中 hexo init 进行初始化 关联远程仓库 git remote add origin git@github.com:&amp;lt;你的用户名&amp;gt;/&amp;lt;存放源文件的仓库名&amp;gt;.git git pull --rebase origin master和远程仓库进行一个同步 然后依次进行git add .，git commit -m &amp;quot;init repo&amp;quot;，git push -u origin master ，然后就大功告成啦 上传好的源文件在github中如下
注意：如theme文件夹中主题文件中有.git文件，请将其删除在上传</description>
    </item>
    
    <item>
      <title>white主题配置</title>
      <link>https://fushaolei.github.io/post/doc-white-configration/</link>
      <pubDate>Sun, 09 Aug 2020 23:31:29 +0000</pubDate>
      
      <guid>https://fushaolei.github.io/post/doc-white-configration/</guid>
      <description>👋Hi there 欢迎使用本主题 ，White 是一个在个性和极简之间徘徊的主题，（因为作者本身性格就是这样的人，而且搞不好心态爆炸会删库跑路（现已跑路。。。），还请喜欢的各位及时fork🤣
如果你喜欢这款主题的话，不妨给我一个star 感激不尽！
安装 方便备份和更新
fork 本项目 git clone https://github.com/&amp;lt;你的用户名&amp;gt;/hexo-theme-white.git themes/white 修改根目录下的_config.yml 为theme: white 主题配置 其实config文件里写的很明白了，现在就重新列一下，添加一些不必要的说明
可自定义style ############## style ############## style: layout: max-width: 1130px #总体宽度 post-max-width: 800px #文章内容宽度 color: theme-main: &amp;#34;#1A98FF&amp;#34; # 主色调 theme-secondary: &amp;#34;#DDF0FF&amp;#34; # 次色调 text-main: &amp;#34;#333333&amp;#34; # 文字主色调 text-secondary: &amp;#34;#898FA0&amp;#34; # 文字次色调 animation: open: true # 如果开启动画的话会引入animation.css 主页配置 home页和archive可选配置 # home页可选类型 home: type: &amp;#34;img&amp;#34; # 主页的类型，可选 home | img | simple # archive页可选类型 archive: type: &amp;#34;simple&amp;#34; # archive的类型，可选 img | simple type为home就是一个封面，为img就是图片加标题的形式，simple就是极简模式</description>
    </item>
    
    <item>
      <title>IDEA安装</title>
      <link>https://fushaolei.github.io/post/idea-note/</link>
      <pubDate>Sun, 14 Jun 2020 21:36:08 +0000</pubDate>
      
      <guid>https://fushaolei.github.io/post/idea-note/</guid>
      <description>哭唧唧，用惯了eclispe的我用起idea就像一个傻子，现在记录一下，以免忘记 所用版本：idea 2020.1
1. 下载和安装 去官网下载：https://www.jetbrains.com/idea/download/ 安装随意，破解的话 看这篇文章，有开源项目的建议可以试着申请下免费的一年使用权，链接指路：https://www.jetbrains.com/zh-cn/community/opensource/
2. 配置maven maven的作用就是帮助我们下载需要的jar包，不需要在自己去网上找来找去了
点击这个链接：https://maven.apache.org/，去这个页面: 然后解压，记住你解压后的位置，比如我直接解压到E盘 然后是配置环境，电脑&amp;gt;属性&amp;gt;高级系统设置&amp;gt;环境变量，在系统变量中添加一个变量为M2_HOME，值为你的maven存放路径，然后到path里添加一个maven的bin路径，懒了不贴图了 在cmd中输入mvn -v出现maven的版本号 ，就说明配置成功啦！
这时还没完： 进入E:\apache-maven-3.6.3\conf路径下。打开setting.xml 在mirrors中添加一个镜像
&amp;lt;mirror&amp;gt; &amp;lt;id&amp;gt;nexus-aliyun&amp;lt;/id&amp;gt; &amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt; &amp;lt;name&amp;gt;Nexus aliyun&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://maven.aliyun.com/nexus/content/groups/public/&amp;lt;/url&amp;gt; &amp;lt;/mirror&amp;gt; 阿里云镜像，到时候下载jar包时会更快
下载的路径还没修改，将在后续补上
3. Idea配置maven 先随意创建一个项目。。。进去后 -Xms1024m -Xmx2048m 好了 这样后，每创建一个新的项目，都会自动给你配置maven的路径，然后下载jar包的速度也会相应的加快，这给我们的开发带来了极大的便利</description>
    </item>
    
    <item>
      <title>Git学习笔记</title>
      <link>https://fushaolei.github.io/post/git-note/</link>
      <pubDate>Mon, 03 Feb 2020 10:55:36 +0000</pubDate>
      
      <guid>https://fushaolei.github.io/post/git-note/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;使用Git是程序员必备的一个技能，虽然以前有跟着老师学过，但是一知半解，所以重新学过，本文记录了我学习Git的全过程&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>
