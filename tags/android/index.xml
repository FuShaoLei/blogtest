<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on FuShaoLei Blog</title>
    <link>https://fushaolei.github.io/tags/android/</link>
    <description>Recent content in Android on FuShaoLei Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 06 Oct 2020 13:34:37 +0000</lastBuildDate><atom:link href="https://fushaolei.github.io/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Android MVP模式思想</title>
      <link>https://fushaolei.github.io/post/android-mvp/</link>
      <pubDate>Tue, 06 Oct 2020 13:34:37 +0000</pubDate>
      
      <guid>https://fushaolei.github.io/post/android-mvp/</guid>
      <description>前言 以前有学过，感觉理解不了，然后又用不到，然后就不了了之了 ，现在因为实习公司的项目有用到，如果不学的话感觉根本看不懂项目（其实学完之后还是看不懂😂），所以就重新学过，顺便记录一下
2021年1月13日补充 当初想的窄了，从细枝末节入手，缺乏一个全局的观念，现在想起来，其实下面所说的预备知识，其实是为优化MVP模式所服务的。
以及，mvp模式只是一个思想，并没有具体的，标准的编码规定
预备知识 面向接口的编程思想 向上转型的概念 解耦 面向接口编程 先复习一下接口的概念：
在Java程序设计语言中，接口不是类，而是对希望符合这个接口的类的一组需求（出自《Java核心卷一》p222页） 说白了，接口就是一组需求
而面向接口编程呢，就是在开始开发前，先定义好接口（可以理解为先列出一组需求），然后再进行开发
向上转型 即父类引用指向子类对象（即多态），看完下面的代码应该更好理解些
public interface IStudent { String getName(); } public class Student implements IStudent{//此时IStudent是父类，Student是子类 @Override public String getName() { return &amp;#34;任我行&amp;#34;; } } public class Test { public static void main(String[] args) { IStudent iStudent; iStudent=new Student();//父类引用指向子类的对象，这里做了向上转型 System.out.println(&amp;#34;学生的名字是：&amp;#34;+iStudent.getName());//打印结果：学生的名字是：任我行 } } 解耦 解耦即降低依赖性
MVP模式 Actually，我觉得MVP模式的灵魂就是presenter层同时持有view层和model层的引用（请联系上边的向上转型的概念）。
照此逻辑，我们简单实现一个常见的登录模块。根据面向接口编程，我们首先列出我们的接口（需求）：
/** * View层的需求 */ public interface IView { //1. 获取用户的输入信息 public User getViewUser(); //2.</description>
    </item>
    
  </channel>
</rss>
