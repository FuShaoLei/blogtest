<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>读书笔记 on FuShaoLei Blog</title>
    <link>https://fushaolei.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 读书笔记 on FuShaoLei Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 02 Jul 2022 17:34:37 +0000</lastBuildDate><atom:link href="https://fushaolei.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>《图解Http》笔记</title>
      <link>https://fushaolei.github.io/post/diagram-http-note/</link>
      <pubDate>Sat, 02 Jul 2022 17:34:37 +0000</pubDate>
      
      <guid>https://fushaolei.github.io/post/diagram-http-note/</guid>
      <description>好久没写博客了，但是笔记是有常常写的，只是懒的把笔记放到博客上，因为我觉得，博客里一定要有内容，至少百分之八十的文章，要让人读了感觉有收获，我觉得这样个人博客才能够受欢迎，而自己平常做的笔记，比较随意，所以不太敢放上来，但是我觉得也不用那么刻意，毕竟看博客最多的可能是自己，现在也关闭了评论系统了，其实可以用gitalk，但是我觉得这个东西，比较粗糙，因为有时候换个url什么之类的，可能它又另启一个仓库，感觉比较傻瓜，当然，这只是过去我对它的认知，再加上评论的人不是很多，如果是交流学习的话，我感觉还是发邮件好一点，因为你会比较慎重。话不多说，下面是正文
第 1 章 了解web及网络基础 HTTP，全名Hypertext Transfer Protocol，超文本传输协议
互联网是再TCP/IP协议族的基础上运作起来的
TCP/IP协议族分为四层：
应用层：决定了向用户提供应用服务时的通信活动，如FTP，DNS，HTTP等 传输层：提供数据传输，如TCP，UDP 网络层：处理数据包？ 链路层：用来处理连接网路的硬件部分 与HTTP密切相关的几个协议：
IP协议：作用是保证数据包传送到指定目标 TCP协议：作用是可靠传输 DNS服务：负责解析域名成IP地址 URI和URL
URI是统一资源标识符，强调是唯一标识 URL是统一资源定位符，强调的是位置，在什么位置上 第 2 章 简单的HTTP协议 请求访问资源的一端为客户端，提供资源的一端为服务器端，始终都是由客户端来建立通信的
客户端请求报文：
// 方法 URI 版本协议GET /user/ HTTP/1.1// Request Headers Host: api.github.comContent-Type: text/plainContent-Length:21// Request Bodyname=fushaolei&amp;amp;age=21 服务端响应报文：
// 版本协议 状态码 状态信息HTTP/1.1 200 OK// Response Headers Content-Type: application/jsonContent-Length:21// Response Bodybodybodybodybodybodybodybodybodybodybodybodybodybodybodybodybodybodybodybodybody Http是不保存状态的协议
各种请求方法：
方法 说明 GET 请求资源，无Request Body，有Response Body POST 用于增加或修改资源，有Request Body，有Response Body PUT 同样用于增加或修改资源，但和POST不同的是，PUT是幂等的（调用一次与连续调用多次是等价的），有Response Body HEAD 获得报文首部，没有Response Body DELETE 删除文件 OPTIONS 询问支持方法 TRACE 追踪路径，可以查询发出去的请求是被怎样加工修改的 CONNECT 要求用隧道协议连接代理 使用Cookie进行状态管理，客户端保存好服务器端发送过来的Set-Cookie字段，在每次请求的时候带上Cookie，从而验证身份</description>
    </item>
    
    <item>
      <title>Java关键字总结</title>
      <link>https://fushaolei.github.io/post/java-keyword/</link>
      <pubDate>Wed, 03 Mar 2021 13:34:37 +0000</pubDate>
      
      <guid>https://fushaolei.github.io/post/java-keyword/</guid>
      <description> 关键字 说明 class 定义一个类 enum 枚举类型 abstract 抽象类或方法 interface 接口 extends 定义一个类的父类，或者通配符的上界 implements 定义一个类实现的接口 new new操作符加上构造器，构造一个新的对象，返回值是一个对象的引用 this 一是指隐式参数的调用，二是指调用该类的其他构造器（而且只能放在第一行的位置） super 一是调用超类的方法，二是调用超类的构造器 import 导入一个包 package 包含类的一个包 public 访问修饰符，对外部完全可见 private 访问修饰符，仅对本类可见 protected 对本包及所有子类可见 </description>
    </item>
    
    <item>
      <title>《Java核心技术I》笔记</title>
      <link>https://fushaolei.github.io/post/core-java-1-note/</link>
      <pubDate>Fri, 15 Jan 2021 13:34:37 +0000</pubDate>
      
      <guid>https://fushaolei.github.io/post/core-java-1-note/</guid>
      <description>日期 说明 2021/01/31 读完了第一遍，边读边记，看的比较随意，除了第一第二章外，有些难的或者偏也都直接跳过了😜，看第二遍的时候再补回来吧 maybe。 概述 第 1 章 + 第 2 章 ： 这两章介绍了一些东西，比如Java的发展历史啊，Java的特性啊，以及Java的运行环境等等。特别要说的是，Java是一门面向对象程序设计语言，程序设计语言的成功取决于是否可以实现需要的功能，而不是语法的精巧性。以及JDK（Java Development Kit：Java开发工具包）与JRE（Java Runtime Environment：Java运行时环境） 第 3 章 Java的基本程序设计结构：这一章讲了Java的一些基础知识，比如注释啊，8 种基本类型啊（int,short,long,byte,double,float,boolean,char），变量（如何声明，初始化变量）与常量，运算符（其中还提到了短路的概念），介绍了字符串，输入输出等（这一节其实还讲了Math的一些静态方法，不过我觉得不是很重要，需要的时候可以查嘛，所以这里就不记录了） 第 4 章 对象与类：这一章介绍了面向对象思想，还有类与对象的关系，说了面向对象的一些特性，以及自定义类的一些内容，还有使用构造器时代码的执行顺序 第 3 章 Java的基本程序设计结构 1.第一个程序 public class Hello { public static void main(String[] args) { System.out.println(&amp;#34;Hello World&amp;#34;); } } 说明
public（访问修饰符） 用于控制对所修饰的类或对象或字段的访问级别 class表示这是一个类，Hello则是这个类的类名 main方法是所有程序的入口 大括号表示方法体的开始与结束 2.注释 //单行注释 /* 多行注释，（不能嵌套使用） */ /** * 文档注释 * 可用于自动的生成文档 */ 3.数据类型 基本类型 位数 字节 默认值 int 32 4 0 short 16 2 0 long 64 8 0L byte 8 1 0 char 16 2 &amp;lsquo;u0000&amp;rsquo; float 32 4 0f double 64 8 0d boolean 1 false 4.</description>
    </item>
    
  </channel>
</rss>
